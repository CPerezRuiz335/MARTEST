DatosIniciales <- read.csv('DatosIniciales.csv', header = T)
DatosIniciales
write.csv(DatosIniciales[,-1], 'DatosIniciales.csv', row.names = F)
DatosIniciales <- read.csv('DatosIniciales.csv', header = T)
DatosIniciales
getwd()
<
source('~/TFGCarlosPérez_R/FuncionesTFG.R', echo=TRUE)
DatosIniciales <- read.csv('DatosIniciales.csv', header = T)
patrones(DatosIniciales)
plotflux(DatosIniciales)
df <- amelia(DatosIniciales, noms = 1:20, m = 1)$imputations$imp1
n_items <- ncol(df)
mirtCluster(parallel::detectCores()-1)
mirt.exp.2F <- mirt(df, 2, itemtype = '2PL', method = 'MHRM')
fscores(mirt.exp.2F)
hist(fscores(mirt.exp.2F)[,1])
hist(fscores(mirt.exp.2F)[,2])
hist(fscores(mirt.exp.2F)[,1])
mirt.exp.3F <- mirt(df, 3, itemtype = '2PL', method = 'MHRM')
hist(fscores(mirt.exp.3F)[,1])
hist(fscores(mirt.exp.3F)[,2])
hist(fscores(mirt.exp.3F)[,3])
shapiro.test(fscores(mirt.exp.3F)[,1])
shapiro.test(fscores(mirt.exp.3F)[,2])
shapiro.test(fscores(mirt.exp.3F)[,3])
?shapiro.test
sd(fscores(mirt.exp.3F)[,3])
sd(fscores(mirt.exp.3F)[,2])
sd(fscores(mirt.exp.3F)[,1])
parametros.mirt.exp.3F <- CoefToDataframe(modelo = mirt.exp.3F, n_items = n_items)
coordenadas.mirt.exp.3F <- polar_coords(parametros.mirt.exp.3F[,1:3],
parametros.mirt.exp.3F$d)
coordenadas.mirt.exp.3F
hist(coordenadas.mirt.exp.3F$MDIFF)
hist(-coordenadas.mirt.exp.3F$MDIFF)
library(bannerCommenter)
bannerCommenter::boxup('En este proyecto se encuentra el codigo fuente de ‘MARTEST Hacia una evaluación hecha a \nmedida’ organizado en los tres capítulos del manual donde hay extractos y explicacions del \ncódigo que se encuentra en cada Script.  Aquí se proprcionan argumentos a cada funcion que \npueden no ser adecuados para los datos que se vayan a introduir.\n
Para utilitzar correctamente el código haga Source al script FuncionesMARTEST, esto permitirá \ncargar e instalar las librerías y funciones necesarias sino se tienen cargadas o instaladas. Los \ndemás Scripts hacen referencia a cada capítulo, como se ha explicado anteriormente, y se deben ejecutar respetando su orden.\n El primero contiene la base de datos iniciales en ‘DatosIniciales’ y hace una exploración e \nimputación de valores en blanco. El segundo Script (Capítulo 3) permite obtener parámetros \npara cada ítem y hacer pruebas de bondad de ajuste, y el último Script (Capítulo 4) permite \nimplementar el Test Adaptativo Informatizado (TAI).
')
parametros.mirt.exp.3F
?mirtCAT::generate.mirt_object
mirtCAT::generate.mirt_object(parametros.mirt.exp.3F, itemtype = '2PL')
coef(mirtCAT::generate.mirt_object(parametros.mirt.exp.3F, itemtype = '2PL'))
coef(mirtCAT::generate.mirt_object(parametros.mirt.exp.3F, itemtype = '2PL'))
parametros.mirt.exp.3F
mirtCAT.exp.3F <- mirtCAT::generate.mirt_object(parametros.mirt.exp.3F, itemtype = '2PL')
coef(mirtCAT.exp.3F)
mirt::coef(mirtCAT.exp.3F)
matrixplot(
(matrix(colMeans(is.na(data))*1.8,
nrow(data), ncol(data),
byrow = T) + ifelse(is.na(data), NA, 0)),
cex.lab = 1.5,
cex.axis=1.5,
ylab = 'Respondientes'
)
library(mice)
library(ggplot2)
library(ggrepel)
library(Amelia)
library(VIM)
library(mirt)
library(mirtCAT)
patrones <- function(data){
matrixplot(
(matrix(colMeans(is.na(data))*1.8,
nrow(data), ncol(data),
byrow = T) + ifelse(is.na(data), NA, 0)),
cex.lab = 1.5,
cex.axis=1.5,
ylab = 'Respondientes'
)
}
patrones(DatosIniciales)
matrixplot(
(matrix(colMeans(is.na(data))*1.8,
nrow(data), ncol(data),
byrow = T) + ifelse(is.na(data), NA, 0)),
cex.lab = 1.5,
cex.axis=1.5,
ylab = 'Respondientes',
xlab = 'Items'
)
patrones <- function(data){
matrixplot(
(matrix(colMeans(is.na(data))*1.8,
nrow(data), ncol(data),
byrow = T) + ifelse(is.na(data), NA, 0)),
cex.lab = 1.5,
cex.axis=1.5,
ylab = 'Respondientes',
xlab = 'Items'
)
}
patrones(DatosIniciales)
mirtCluster(parallel::detectCores()-1)
mirt.exp.3F <- mirt(df, 3, itemtype = '2PL', method = 'QMCEM')
mirt.exp.3F
mirt.exp.2F <- mirt(df, 5, itemtype = '2PL', method = 'MHRM')
mirt.exp.2F <- mirt(df, 20, itemtype = '2PL', method = 'MHRM')
library(mice)
library(ggplot2)
library(ggrepel)
library(Amelia)
library(VIM)
library(mirt)
library(mirtCAT)
mirtCluster(parallel::detectCores()-1)
mirt.exp.3F <- mirt(df[,1:10], 5, itemtype = '2PL', method = 'QMCEM')
mirt.exp.3F <- mirt(df[,1:10], 5, itemtype = '2PL', method = 'MHRM')
mirt.exp.3F
mirt.exp.3F <- mirt(df[,1:10], 20, itemtype = '2PL', method = 'MHRM')
mirt.exp.3F <- mirt(df[,1:10], 10, itemtype = '2PL', method = 'MHRM')
mirt.exp.3F
itemfit.mirt.exp.3F
source('~/TFGCarlosPérez_R/FuncionesTFG.R', echo=TRUE)
library(mice)
library(ggplot2)
library(ggrepel)
library(Amelia)
library(VIM)
library(mirt)
library(mirtCAT)
patrones <- function(data){
matrixplot(
(matrix(colMeans(is.na(data))*1.8,
nrow(data), ncol(data),
byrow = T) + ifelse(is.na(data), NA, 0)),
cex.lab = 1.5,
cex.axis=1.5,
ylab = 'Respondientes',
xlab = 'Items'
)
}
plotflux <- function(data) {
pat <- md.pairs(data)
outflux <- rowSums(pat$rm) / (rowSums(pat$rm + pat$mm))
influx <- rowSums(pat$mr) / (rowSums(pat$mr + pat$rr))
datframe <- data.frame(influx = influx, outflux = outflux, items = colnames(data),
Imputable = colMeans(data, na.rm = T) %in% 0:1)
ggplot(datframe,aes(influx, outflux, label = items, col = Imputable)) +
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0))+
coord_cartesian(xlim = c(0:1),
ylim = c(0:1)) +
theme_minimal()+
geom_point() +
scale_color_manual(values = c('black','red'))+
geom_text_repel(
max.overlaps = ncol(data),
data = subset(datframe, influx < .5 & outflux < .5 | Imputable),
segment.linetype = 3.5,
family = 'mono',
fontface = 'bold',
size = 6) +
theme(legend.position = 'none',
axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
}
ward_mat <- function(df){
# funcion que calcula angulo entre dos vectores
angulo_vectores <- function(angulo1, angulo2) {
coord1 <- cos(angulo1 * pi / 180)
coord2 <- cos(angulo2 * pi / 180)
acos(sum(coord1 * coord2) / (sqrt(sum(coord1^2)) * sqrt(sum(coord2^2)))) * 180 / pi
}
# subset items completos
angulos <- df[complete.cases(df),]
# calcular angulo entre cada par de items
mat <- sapply(1:nrow(angulos), function(x){
sapply(1:nrow(angulos), function(y){
angulo_vectores(angulos[x,],angulos[y,])
})
})
mat[is.na(mat)] <- 0
return(mat)
}
MDIFF <- function(a, d){
-d / sqrt(sum(a^2))
}
MDISC <- function(a){
sqrt(sum(a^2))
}
interseccion2d <- function(a1, a2, d){
a <-  list(c(a1, a2))
angulo <- acos(a1/sqrt(a1^2 + a2^2))
x0 <- cos(angulo) * mapply(MDIFF, a, d)
y0 <- sin(angulo) * mapply(MDIFF, a, d)
return(c(x0, y0, angulo / pi*180))
}
polar_coords <- function(a, d){
MMDD <- sapply(1:nrow(a), function(x){
c(MDIFF(a[x,],d[x]), MDISC(a[x,]))
})
if (ncol(a) == 2){
coords <- mapply(interseccion2d, a[,1],a[,2], d)
x1 <- MMDD[2,] * .25 * cos(coords[3,] * pi / 180) + coords[1,]
y1 <- MMDD[2,] * .25 * sin(coords[3,] * pi / 180) + coords[2,]
data.frame(a, d, MDIFF = MMDD[1,], MDISC = MMDD[2,], ang1 = coords[3,],
ang2 = 90 - coords[3,], x0 = coords[1,], y0 = coords[2,], x1, y1)
} else {
angulos <- t(apply(a, 1, function(x){
sapply(1:ncol(a), function(y) {
acos(x[y]/sqrt(sum(x^2))) / pi*180
})
})
)
colnames(angulos) <- sprintf("ang%d", 1:ncol(angulos))
data.frame(a, d, MDIFF = MMDD[1,], MDISC = MMDD[2,], angulos)
}
}
CoefToDataframe <- function(n_items, modelo, rotate = 'none'){
parametros.lst <- coef(modelo, rotate = rotate)
parametros.df <- rbind(parametros.lst[[1]])
for(i in 2:n_items){
parametros.df <- rbind(parametros.df, parametros.lst[[i]])
}
as.data.frame(parametros.df)
}
DatosIniciales <- read.csv('DatosIniciales.csv', header = T)
df <- amelia(DatosIniciales, noms = 1:20, m = 1)$imputations$imp1
itemfit.mirt.exp.3F <- itemfit(mirt.exp.3F, QMC = T)
itemfit.mirt.exp.3F[which(itemfit.mirt.exp.3F$p.S_X2 < 0.05),]
